/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.6.0
 * Tue, 15 Apr 2025 16:04:00 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables used in the init tab
const _initGlob = {
    percentage: 0,
    output: {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        },
    },
};


// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = new Map();
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];
_pGlob.htmlElements = new Set();
_pGlob.materialsCache = new Map();

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

const createPzLib = ({ v3d=null, appInstance=null }) => {
    function getElement(id, isParent=false) {
        let elem;
        if (Array.isArray(id) && id[0] === 'CONTAINER') {
            if (appInstance !== null) {
                elem = appInstance.container;
            } else if (typeof _initGlob !== 'undefined') {
                // if we are on the initialization stage, we still can have access
                // to the container element
                const contId = _initGlob.container;
                elem = isParent ? parent.document.getElementById(contId)
                        : document.getElementById(contId);
            }
        } else if (Array.isArray(id) && id[0] === 'WINDOW') {
            elem = isParent ? parent : window;
        } else if (Array.isArray(id) && id[0] === 'DOCUMENT') {
            elem = isParent ? parent.document : document;
        } else if (Array.isArray(id) && id[0] === 'BODY') {
            elem = isParent ? parent.document.body : document.body;
        } else if (Array.isArray(id) && id[0] === 'QUERYSELECTOR') {
            elem = isParent ? parent.document.querySelector(id)
                    : document.querySelector(id);
        } else {
            elem = isParent ? parent.document.getElementById(id)
                    : document.getElementById(id);
        }
        return elem;
    }
        
    function getElements(ids, isParent=false) {
        const elems = [];
        if (Array.isArray(ids) && ids[0] !== 'CONTAINER' && ids[0] !== 'WINDOW'
                && ids[0] !== 'DOCUMENT' && ids[0] !== 'BODY'
                && ids[0] !== 'QUERYSELECTOR') {
            for (let i = 0; i < ids.length; i++) {
                elems.push(getElement(ids[i], isParent));
            }
        } else {
            elems.push(getElement(ids, isParent));
        }
        return elems;
    }
        
    function areListenersSame(target0, type0, listener0, optionsOrUseCapture0,
            target1, type1, listener1, optionsOrUseCapture1) {
        const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
                ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
        const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
                ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
        return target0 === target1 && type0 === type1 && listener0 === listener1
                && capture0 === capture1;
    }
        
    function bindListener(target, type, listener, optionsOrUseCapture) {
        const alreadyExists = _pGlob.eventListeners.some(elem => {
            return areListenersSame(elem.target, elem.type, elem.listener,
                    elem.optionsOrUseCapture, target, type, listener,
                    optionsOrUseCapture);
        });
    
        if (!alreadyExists) {
            target.addEventListener(type, listener, optionsOrUseCapture);
            _pGlob.eventListeners.push({ target, type, listener,
                    optionsOrUseCapture });
        }
    }
        
    function isObjectWorthProcessing(obj) {
        return obj.name !== '' &&
                !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
                !obj.isAuxClippingMesh;
    }
        
    function getObjectByName(objName) {
        let objFound = null;
    
        const pGlobAvailable = _pGlob !== undefined;
        if (pGlobAvailable)
            objFound = _pGlob.objCache.get(objName);
    
        if (objFound && objFound.name === objName)
            return objFound;
    
        function findValidByName(obj, objName) {
            if (obj.name === objName && isObjectWorthProcessing(obj))
                return obj;
    
            for (let i = 0; i < obj.children.length; i++) {
                const child = obj.children[i];
                const object = findValidByName(child, objName);
                if (object !== null)
                    return object;
            }
    
            return null;
        }
    
        if (appInstance.scene) {
            objFound = findValidByName(appInstance.scene, objName);
            if (objFound && pGlobAvailable)
                _pGlob.objCache.set(objName, objFound);
        }
    
        return objFound;
    }
        
    function getObjectNamesByGroupName(groupName) {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                const objGroupNames = obj.groupNames;
                if (!objGroupNames) {
                    return;
                }
    
                for (let i = 0; i < objGroupNames.length; i++) {
                    const objGroupName = objGroupNames[i];
                    if (objGroupName === groupName) {
                        objNameList.push(obj.name);
                    }
                }
            }
        });
        return objNameList;
    }
        
    function getAllObjectNames() {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                objNameList.push(obj.name);
            }
        });
        return objNameList;
    }
        
    function retrieveObjectNamesAccum(currObjNames, namesAccum) {
        if (typeof currObjNames === 'string') {
            namesAccum.push(currObjNames);
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'GROUP') {
            const newObjNames = getObjectNamesByGroupName(currObjNames[1]);
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'ALL_OBJECTS') {
            const newObjNames = getAllObjectNames();
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames)) {
            for (let i = 0; i < currObjNames.length; i++) {
                retrieveObjectNamesAccum(currObjNames[i], namesAccum);
            }
        }
    }
        
    function retrieveObjectNames(objNames) {
        const accum = [];
        retrieveObjectNamesAccum(objNames, accum);
        return accum.filter(name => name !== '');
    }
        
    function generateUniqueName(name, isUniqueCb) {
        let uniqueName = name;
    
        if (isUniqueCb !== undefined) {
            while (!isUniqueCb(uniqueName)) {
                const r = uniqueName.match(/^(.*?)(\d+)$/);
                if (!r) {
                    uniqueName += '2';
                } else {
                    uniqueName = r[1] + (Number.parseInt(r[2], 10) + 1);
                }
            }
        }
    
        return uniqueName;
    }
        
    function generateUniqueObjectName(name) {
        return generateUniqueName(name, name => !Boolean(getObjectByName(name)));
    }
        
    class MediaHTML5 {
        constructor() {
            this.source = null;
        }
    
        load(url, isVideo) {
            if (isVideo) {
                this.source = document.createElement('video');
                this.source.playsInline = true;
                this.source.preload = 'auto';
                this.source.autoload = true;
                this.source.crossOrigin = 'anonymous';
            } else {
                this.source = document.createElement('audio');
            }
    
            this.source.src = url;
            return this;
        }
    
        play() {
            this.source.play();
        }
    
        pause() {
            this.source.pause();
        }
    
        stop() {
            this.source.pause();
            this.source.currentTime = 0;
        }
    
        rewind() {
            this.source.currentTime = 0;
        }
    
        setPlaybackTime(time) {
            this.source.currentTime = time
        }
    
        getPlaybackTime() {
            return this.source.currentTime;
        }
    
        getDuration() {
            return this.source.duration;
        }
    
        setPlaybackRate(rate) {
            this.source.playbackRate = rate;
        }
    
        isPlaying() {
            return this.source.duration > 0 && !this.source.paused;
        }
    
        setLoop(looped) {
            this.source.loop = looped;
        }
    
        setVolume(volume) {
            this.source.volume = volume;
        }
    
        setMuted(muted) {
            this.source.muted = muted;
        }
    
        toPositional() {
            if (!(this.audio instanceof v3d.PositionalAudio)) {
                const posAudio = new v3d.PositionalAudio(new v3d.AudioListener());
                posAudio.setMediaElementSource(this.source);
                this.audio = posAudio;
            }
            return this.audio;
        }
    }
        
    function getObjectName(obj) {
        // auto-generated from a multi-material object, use parent name instead
        if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
            return obj.parent.name;
        } else {
            return obj.name;
        }
    }
        
    function initObjectPicking(callback, eventType, mouseDownUseTouchStart=false,
            allowedMouseButtons=null) {
    
        const elem = appInstance.renderer.domElement;
        bindListener(elem, eventType, pickListener);
    
        if (eventType === 'mousedown') {
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, pickListener);
    
        } else if (eventType === 'dblclick') {
    
            let prevTapTime = 0;
    
            function doubleTapCallback(event) {
                const now = new Date().getTime();
                const timesince = now - prevTapTime;
    
                if (timesince < 600 && timesince > 0) {
                    pickListener(event);
                    prevTapTime = 0;
                    return;
                }
    
                prevTapTime = new Date().getTime();
            }
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, doubleTapCallback);
        }
    
        const raycaster = new v3d.Raycaster();
    
        function pickListener(event) {
    
            // to handle unload in loadScene puzzle
            if (!appInstance.getCamera()) {
                return;
            }
    
            event.preventDefault();
    
            let xNorm = 0;
            let yNorm = 0;
            if (event instanceof MouseEvent) {
                if (allowedMouseButtons !== null && allowedMouseButtons.indexOf(event.button) === -1) {
                    return;
                }
                xNorm = event.offsetX / elem.clientWidth;
                yNorm = event.offsetY / elem.clientHeight;
            } else if (event instanceof TouchEvent) {
                const rect = elem.getBoundingClientRect();
                xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
                yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
            }
    
            _pGlob.screenCoords.x = xNorm * 2 - 1;
            _pGlob.screenCoords.y = -yNorm * 2 + 1;
            raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
    
            const objList = [];
            appInstance.scene.traverse(obj => objList.push(obj));
    
            const intersects = raycaster.intersectObjects(objList, false);
            callback(intersects, event);
        }
    }
        
    function isObjectAmongObjects(objNameToCheck, objNames) {
        if (!objNameToCheck) {
            return false;
        }
    
        for (let i = 0; i < objNames.length; i++) {
            if (objNameToCheck === objNames[i]) {
                return true;
            } else {
                // also check children which are auto-generated for multi-material objects
                const obj = getObjectByName(objNames[i]);
                if (obj && obj.type === 'Group') {
                    for (let j = 0; j < obj.children.length; j++) {
                        if (objNameToCheck === obj.children[j].name) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
        
    function getSceneAnimFrameRate(scene) {
        if (scene && 'animFrameRate' in scene.userData) {
            return scene.userData.animFrameRate;
        }
        return 24;
    }
        
    function getSceneByAction(action) {
        const root = action.getRoot();
        let scene = root.type === 'Scene' ? root : null;
        root.traverseAncestors(ancObj => {
            if (ancObj.type === 'Scene') {
                scene = ancObj;
            }
        });
        return scene;
    }
        
    function transformCoordsSpace(coords, spaceFrom, spaceTo, noSignChange=false) {
    
        if (spaceFrom === spaceTo) {
            return coords;
        }
    
        const y = coords.y;
        const z = coords.z;
    
        if (spaceFrom === 'Z_UP_RIGHT' && spaceTo === 'Y_UP_RIGHT') {
            coords.y = z;
            coords.z = noSignChange ? y : -y;
        } else if (spaceFrom === 'Y_UP_RIGHT' && spaceTo === 'Z_UP_RIGHT') {
            coords.y = noSignChange ? z : -z;
            coords.z = y;
        } else {
            console.error('transformCoordsSpace: Unsupported coordinate space');
        }
    
        return coords;
    }
        
    function getSceneCoordSystem() {
        const scene = appInstance.scene;
        if (scene && 'coordSystem' in scene.userData) {
            return scene.userData.coordSystem;
        }
    
        return 'Y_UP_RIGHT';
    }

    return {
        getElements, getElement, bindListener, getObjectByName,
        retrieveObjectNames, generateUniqueObjectName, MediaHTML5, getObjectName,
        initObjectPicking, isObjectAmongObjects, getSceneAnimFrameRate, getSceneByAction,
        transformCoordsSpace, getSceneCoordSystem,
    };
};

var PL = {};



// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    const PzLib = createPzLib({ v3d });

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    this.procedures["pantalla_mobil_horinzontal"] = pantalla_mobil_horinzontal;
this.procedures["pantalla_mobil_vertical"] = pantalla_mobil_vertical;
this.procedures["pantalla_mobil"] = pantalla_mobil;
this.procedures["pantalla_web"] = pantalla_web;

    var PROC = {
    "pantalla_mobil_horinzontal": pantalla_mobil_horinzontal,
    "pantalla_mobil_vertical": pantalla_mobil_vertical,
    "pantalla_mobil": pantalla_mobil,
    "pantalla_web": pantalla_web,
};

var VARS = Object.defineProperties({}, {
    
});

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// Describe this function...
function pantalla_mobil_horinzontal() {
  setHTMLElemStyle('display', 'none', 'aviso_celular', true);
}

// Describe this function...
function pantalla_mobil_vertical() {
  setHTMLElemStyle('display', 'flex', 'aviso_celular', true);
}

// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = PzLib.getElement(id, isParent);
    return elem ? elem[attr]: '';
}

// removeHTMLElement puzzle
function removeHTMLElement(id, isParent) {
    const elem = PzLib.getElement(id, isParent);
    if (elem && elem.parentNode) {
        elem.parentNode.removeChild(elem);
        _pGlob.htmlElements.delete(elem);
    }
}

// Describe this function...
function pantalla_mobil() {
  if (getHTMLElemAttribute('innerWidth', ['WINDOW'], false) < getHTMLElemAttribute('innerHeight', ['WINDOW'], false)) {
    pantalla_mobil_vertical();
  }

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.addEventListener(\'resize\', function() {' + '\n' +
  '    if (window.innerWidth > window.innerHeight) {' + '\n' +
  '        v3d.puzzles.procedures["pantalla_mobil_horinzontal"]();' + '\n' +
  '    } else {' + '\n' +
  '        v3d.puzzles.procedures["pantalla_mobil_vertical"]();' + '\n' +
  '    }' + '\n' +
  '});' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  removeHTMLElement('ayuda', true);
  removeHTMLElement('ayudaContainer', true);
}

// Describe this function...
function pantalla_web() {
  removeHTMLElement('ayudaMovil', true);
  removeHTMLElement('ayudaMovilContainer', true);
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = false;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
  setHTMLElemAttribute('style', ['stroke-dashoffset:',472 - 472 * (Math.round(_initGlob.percentage) / 100),';'].join(''), 'circle', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('// Detectar si es un dispositivo móvil' + '\n' +
  'if (/Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {' + '\n' +
  '    v3d.puzzles.procedures["pantalla_mobil"]();' + '\n' +
  '} else {' + '\n' +
  '    v3d.puzzles.procedures["pantalla_web"]();' + '\n' +
  '}' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'flex', 'logo', true);
  setHTMLElemStyle('display', 'flex', 'menu', true);
  setHTMLElemStyle('display', 'flex', 'ayudas', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

const PzLib = createPzLib({ v3d, appInstance });

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["reiniciar_pasos"] = reiniciar_pasos;
this.procedures["hover"] = hover;
this.procedures["click_paso"] = click_paso;
this.procedures["hover_paso"] = hover_paso;
this.procedures["comprobar_animacion"] = comprobar_animacion;
this.procedures["desanimacion"] = desanimacion;
this.procedures["home-camera"] = home_camera;

var PROC = {
    "reiniciar_pasos": reiniciar_pasos,
    "hover": hover,
    "click_paso": click_paso,
    "hover_paso": hover_paso,
    "comprobar_animacion": comprobar_animacion,
    "desanimacion": desanimacion,
    "home-camera": home_camera,
};

var VARS = Object.defineProperties({}, {
    'lang': { get: function() { return lang; }, set: function(val) { lang = val; } },
    'sonido': { get: function() { return sonido; }, set: function(val) { sonido = val; } },
    'objeto': { get: function() { return objeto; }, set: function(val) { objeto = val; } },
    'paso': { get: function() { return paso; }, set: function(val) { paso = val; } },
    'direccion': { get: function() { return direccion; }, set: function(val) { direccion = val; } },
    'objeto_paso': { get: function() { return objeto_paso; }, set: function(val) { objeto_paso = val; } },
    'objeto_bordes': { get: function() { return objeto_bordes; }, set: function(val) { objeto_bordes = val; } },
    'text_paso': { get: function() { return text_paso; }, set: function(val) { text_paso = val; } },
    'objeto_flag': { get: function() { return objeto_flag; }, set: function(val) { objeto_flag = val; } },
    'animacion': { get: function() { return animacion; }, set: function(val) { animacion = val; } },
    'objeto_flag_comprobacion': { get: function() { return objeto_flag_comprobacion; }, set: function(val) { objeto_flag_comprobacion = val; } },
    'pro1': { get: function() { return pro1; }, set: function(val) { pro1 = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'chancadoBordes': { get: function() { return chancadoBordes; }, set: function(val) { chancadoBordes = val; } },
    'moliendaBordes': { get: function() { return moliendaBordes; }, set: function(val) { moliendaBordes = val; } },
    'backFillBordes': { get: function() { return backFillBordes; }, set: function(val) { backFillBordes = val; } },
    'flotacionZNBordes': { get: function() { return flotacionZNBordes; }, set: function(val) { flotacionZNBordes = val; } },
    'chancadoAnimation': { get: function() { return chancadoAnimation; }, set: function(val) { chancadoAnimation = val; } },
    'flotacionPBBordes': { get: function() { return flotacionPBBordes; }, set: function(val) { flotacionPBBordes = val; } },
    'deshidratacionPBBordes': { get: function() { return deshidratacionPBBordes; }, set: function(val) { deshidratacionPBBordes = val; } },
    'moliendaAnimation': { get: function() { return moliendaAnimation; }, set: function(val) { moliendaAnimation = val; } },
    'deshidratacionZNBordes': { get: function() { return deshidratacionZNBordes; }, set: function(val) { deshidratacionZNBordes = val; } },
    'reagentsBordes': { get: function() { return reagentsBordes; }, set: function(val) { reagentsBordes = val; } },
    'backFillAnimation': { get: function() { return backFillAnimation; }, set: function(val) { backFillAnimation = val; } },
    'flotacionZNAnimation': { get: function() { return flotacionZNAnimation; }, set: function(val) { flotacionZNAnimation = val; } },
    'flotacionPBAnimation': { get: function() { return flotacionPBAnimation; }, set: function(val) { flotacionPBAnimation = val; } },
    'deshidratacionPBAnimation': { get: function() { return deshidratacionPBAnimation; }, set: function(val) { deshidratacionPBAnimation = val; } },
    'deshidratacionZNAnimation': { get: function() { return deshidratacionZNAnimation; }, set: function(val) { deshidratacionZNAnimation = val; } },
    'reagentsAnimation': { get: function() { return reagentsAnimation; }, set: function(val) { reagentsAnimation = val; } },
    'texto_obj': { get: function() { return texto_obj; }, set: function(val) { texto_obj = val; } },
    'animation_obj': { get: function() { return animation_obj; }, set: function(val) { animation_obj = val; } },
    'proceso': { get: function() { return proceso; }, set: function(val) { proceso = val; } },
});

var objeto, paso, direccion, objeto_paso, objeto_bordes, text_paso, objeto_flag, animacion, objeto_flag_comprobacion, chancadoBordes, chancadoAnimation, texto_obj, proceso, moliendaBordes, moliendaAnimation, backFillBordes, backFillAnimation, pro1, flotacionZNBordes, flotacionZNAnimation, i, flotacionPBBordes, deshidratacionZNAnimation, deshidratacionPBBordes, reagentsAnimation, lang, deshidratacionZNBordes, flotacionPBAnimation, reagentsBordes, deshidratacionPBAnimation, sonido, animation_obj;

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        PzLib.bindListener(elem, eventType, callback);
    }
}

// createCSSRule puzzle
function createCSSRule(cssRule, cssRuleCont, isParent, mediaRule) {
    var style = document.createElement('style');
    style.type = 'text/css';
    if (mediaRule) {
        style.innerHTML = `@media ${mediaRule} { ${cssRule} { ${cssRuleCont} } }`;
    } else {
        style.innerHTML = `${cssRule} { ${cssRuleCont} }`;
    }

    var styles = (isParent) ? parent.document.getElementsByTagName('head')[0] :
                              document.getElementsByTagName('head')[0];
    styles.appendChild(style)
}

// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    const styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (let i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        let cssRules;
        try {
            cssRules = styles[i].cssRules;
        }
        catch (e) { continue; }

        for (let j = 0; j < cssRules.length; j++) {
            const cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                const cssRulesMedia = cssRule.cssRules;
                for (let k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// drawLineObjectHTML and removeLineObjectHTML puzzles
function operateLineObjectHTML(objSelector, id, isParent, width, color, offset, op) {
    const elem = PzLib.getElement(id, isParent);
    if (!elem && (op == 'DRAW'))
        return;
    const objNames = PzLib.retrieveObjectNames(objSelector);
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        const obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;

        for (let j = obj.children.length - 1; j >= 0; j--) {
            const child = obj.children[j];
            if (child.isLineHTML) {
                obj.remove(child);
                child.geometry.dispose();
                child.material.dispose();

                // remove line from the cache
                _pGlob.objCache.delete(child.name);
            }
        }

        if (op == 'DRAW') {
            const line = new v3d.LineHTML(new v3d.Color(color), width);
            line.name = objName + 'Line';
            line.offset = offset;
            line.elemHTML = elem;
            obj.add(line);
        }
    }
}

// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = PzLib.generateUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// Describe this function...
function reiniciar_pasos() {
  operateLineObjectHTML(['ALL_OBJECTS'], '', false, '', '', '', 'REMOVE');
  handleAnnot(false, '', ['ALL_OBJECTS'], '', '', undefined);
  outline(['ALL_OBJECTS'], 'DISABLE');
  for (let i = 1; i <= 9; i++) {
    setHTMLElemStyle('backgroundColor', 'transparent', 'paso' + String(i), true);
  }
}

// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new PzLib.MediaHTML5().load(url);
    }
    return elems[url];
}

// stopSound puzzle
function stopSound(mediaElem) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.stop();
    });
}

// Describe this function...
function hover() {
  stopSound(loadMedia_HTML5('../../sounds/click.mp3'));
  stopSound(loadMedia_HTML5('../../sounds/hover.mp3'));
  stopSound(loadMedia_HTML5('../../sounds/hover.mp3'));
}

// Describe this function...
function click_paso(objeto, paso, direccion) {
  eventHTMLElem('mouseenter', paso, true, function(event) {
    outline(objeto, 'ENABLE');
  });
  eventHTMLElem('mouseleave', paso, true, function(event) {
    outline(objeto, 'DISABLE');
  });
  eventHTMLElem('click', paso, true, function(event) {
    reiniciar_pasos();
    setHTMLElemStyle('backgroundColor', 'rgba(8, 167, 255, 0.8)', paso, true);
    outline(objeto, 'ENABLE');
  });
}

// whenHovered puzzle
PzLib.initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);

            if (PzLib.isObjectAmongObjects(objName, PzLib.retrieveObjectNames(el.objSelector)) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (PzLib.isObjectAmongObjects(prevHovered, PzLib.retrieveObjectNames(el.objSelector))) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (PzLib.isObjectAmongObjects(currHovered, PzLib.retrieveObjectNames(el.objSelector))) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove');

// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}

// getAnimations puzzle
function getAnimations(objSelector) {
    const objNames = PzLib.retrieveObjectNames(objSelector);

    const animations = [];
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        const action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            PzLib.bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = PzLib.getSceneByAction(action);
                var frameRate = PzLib.getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = PzLib.getSceneByAction(action);
            var frameRate = PzLib.getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    PzLib.initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);
            var objNames = PzLib.retrieveObjectNames(objSelector);

            if (PzLib.isObjectAmongObjects(objName, objNames)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// Describe this function...
function hover_paso(objeto_paso, objeto_bordes, text_paso, objeto_flag, animacion) {
  registerOnHover(objeto_paso, false, function() {
    outline(objeto_paso, 'ENABLE');
  }, function() {
    outline(objeto_paso, 'DISABLE');
  });
  registerOnClick(objeto_paso, false, false, [0,1,2], function() {
    desanimacion();
    animacion = true;
    console.log(animacion);
    objeto_flag = true;

    operateAnimation('PLAY', getAnimations(objeto_bordes), 0, 20, 'AUTO', 1,
            function() {}, false);

        registerSetTimeout(0.5, function() {
      changeVis(text_paso, true);
    });
  }, function() {});
}

// Describe this function...
function comprobar_animacion(objeto_flag_comprobacion) {
var VARS = Object.defineProperties({}, {
    'lang': { get: function() { return lang; }, set: function(val) { lang = val; } },
    'sonido': { get: function() { return sonido; }, set: function(val) { sonido = val; } },
    'objeto': { get: function() { return objeto; }, set: function(val) { objeto = val; } },
    'paso': { get: function() { return paso; }, set: function(val) { paso = val; } },
    'direccion': { get: function() { return direccion; }, set: function(val) { direccion = val; } },
    'objeto_paso': { get: function() { return objeto_paso; }, set: function(val) { objeto_paso = val; } },
    'objeto_bordes': { get: function() { return objeto_bordes; }, set: function(val) { objeto_bordes = val; } },
    'text_paso': { get: function() { return text_paso; }, set: function(val) { text_paso = val; } },
    'objeto_flag': { get: function() { return objeto_flag; }, set: function(val) { objeto_flag = val; } },
    'animacion': { get: function() { return animacion; }, set: function(val) { animacion = val; } },
    'objeto_flag_comprobacion': { get: function() { return objeto_flag_comprobacion; }, set: function(val) { objeto_flag_comprobacion = val; } },
    'pro1': { get: function() { return pro1; }, set: function(val) { pro1 = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'chancadoBordes': { get: function() { return chancadoBordes; }, set: function(val) { chancadoBordes = val; } },
    'moliendaBordes': { get: function() { return moliendaBordes; }, set: function(val) { moliendaBordes = val; } },
    'backFillBordes': { get: function() { return backFillBordes; }, set: function(val) { backFillBordes = val; } },
    'flotacionZNBordes': { get: function() { return flotacionZNBordes; }, set: function(val) { flotacionZNBordes = val; } },
    'chancadoAnimation': { get: function() { return chancadoAnimation; }, set: function(val) { chancadoAnimation = val; } },
    'flotacionPBBordes': { get: function() { return flotacionPBBordes; }, set: function(val) { flotacionPBBordes = val; } },
    'deshidratacionPBBordes': { get: function() { return deshidratacionPBBordes; }, set: function(val) { deshidratacionPBBordes = val; } },
    'moliendaAnimation': { get: function() { return moliendaAnimation; }, set: function(val) { moliendaAnimation = val; } },
    'deshidratacionZNBordes': { get: function() { return deshidratacionZNBordes; }, set: function(val) { deshidratacionZNBordes = val; } },
    'reagentsBordes': { get: function() { return reagentsBordes; }, set: function(val) { reagentsBordes = val; } },
    'backFillAnimation': { get: function() { return backFillAnimation; }, set: function(val) { backFillAnimation = val; } },
    'flotacionZNAnimation': { get: function() { return flotacionZNAnimation; }, set: function(val) { flotacionZNAnimation = val; } },
    'flotacionPBAnimation': { get: function() { return flotacionPBAnimation; }, set: function(val) { flotacionPBAnimation = val; } },
    'deshidratacionPBAnimation': { get: function() { return deshidratacionPBAnimation; }, set: function(val) { deshidratacionPBAnimation = val; } },
    'deshidratacionZNAnimation': { get: function() { return deshidratacionZNAnimation; }, set: function(val) { deshidratacionZNAnimation = val; } },
    'reagentsAnimation': { get: function() { return reagentsAnimation; }, set: function(val) { reagentsAnimation = val; } },
    'texto_obj': { get: function() { return texto_obj; }, set: function(val) { texto_obj = val; } },
    'animation_obj': { get: function() { return animation_obj; }, set: function(val) { animation_obj = val; } },
    'proceso': { get: function() { return proceso; }, set: function(val) { proceso = val; } },
});


  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('for (var k_index in animation_obj) {' + '\n' +
  '      let flag = animation_obj[k_index][0];' + '\n' +
  '      let animation_obj_comprobation = animation_obj[k_index][1];' + '\n' +
  '      let text_obj_comprobation = animation_obj[k_index][3];' + '\n' +
  '      if (flag) {' + '\n' +
  '  ' + '\n' +
  '        operateAnimation(\'PLAY\', getAnimations(animation_obj_comprobation), 0, 20, \'AUTO\', 1,' + '\n' +
  '                function() {}, true);' + '\n' +
  '        changeVis(text_obj_comprobation, false);' + '\n' +
  '  ' + '\n' +
  '            console.log(animation_obj_comprobation + \'_mesh 1\');' + '\n' +
  '      } else {' + '\n' +
  '  ' + '\n' +
  '        operateAnimation(\'PLAY\', getAnimations(String(k) + \'_mesh\'), 0, 20, \'AUTO\', 1,' + '\n' +
  '                function() {}, true);' + '\n' +
  '  ' + '\n' +
  '            console.log(String(k) + \'_mesh 2\');' + '\n' +
  '      }' + '\n' +
  '    }')))(appInstance, v3d, PL, VARS, PROC);

}

// Describe this function...
function desanimacion() {
  if (chancadoAnimation) {

    operateAnimation('PLAY', getAnimations('chancadoBordes_mesh'), 0, 20, 'AUTO', 1,
            function() {}, true);

        changeVis('crushing_txt', false);
    chancadoAnimation = false;
  }
  if (moliendaAnimation) {

    operateAnimation('PLAY', getAnimations('moliendaBordes_mesh'), 0, 20, 'AUTO', 1,
            function() {}, true);

        changeVis('milling_txt', false);
    moliendaAnimation = false;
  }
  if (backFillAnimation) {

    operateAnimation('PLAY', getAnimations('backFillBordes_mesh'), 0, 20, 'AUTO', 1,
            function() {}, true);

        changeVis('backFill_txt', false);
    backFillAnimation = false;
  }
  if (flotacionZNAnimation) {

    operateAnimation('PLAY', getAnimations('flotacionZNBordes_mesh'), 0, 20, 'AUTO', 1,
            function() {}, true);

        changeVis('znFlotation_txt', false);
    flotacionZNAnimation = false;
  }
  if (deshidratacionZNAnimation) {

    operateAnimation('PLAY', getAnimations('deshidratacionZNBordes_mesh'), 0, 20, 'AUTO', 1,
            function() {}, true);

        changeVis('znDewatering_txt', false);
    deshidratacionZNAnimation = false;
  }
  if (reagentsAnimation) {

    operateAnimation('PLAY', getAnimations('reagentsBordes_mesh'), 0, 20, 'AUTO', 1,
            function() {}, true);

        changeVis('reagents_txt', false);
    reagentsAnimation = false;
  }
  if (flotacionPBAnimation) {

    operateAnimation('PLAY', getAnimations('flotacionPBBordes_mesh'), 0, 20, 'AUTO', 1,
            function() {}, true);

        changeVis('pbFlotation_txt', false);
    flotacionPBAnimation = false;
  }
  if (deshidratacionPBAnimation) {

    operateAnimation('PLAY', getAnimations('deshidratacionPBBordes_mesh'), 0, 20, 'AUTO', 1,
            function() {}, true);

        changeVis('pbDewatering_txt', false);
    deshidratacionPBAnimation = false;
  }
}

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = PzLib.transformCoordsSpace(worldPos,
                PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = PzLib.getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = PzLib.transformCoordsSpace(worldTarget,
                PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = PzLib.getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// Describe this function...
function home_camera() {
  tweenCamera('', 'models_mesh30', 1, function() {}, 0);
}


setHTMLElemStyle('cursor', 'grab', ['BODY'], false);
eventHTMLElem('mousedown', ['BODY'], false, function(event) {
  setHTMLElemStyle('cursor', 'grabbing', ['BODY'], false);
});
setHTMLElemStyle('display', 'none', 'paso1', true);
eventHTMLElem('mouseup', ['BODY'], false, function(event) {
  setHTMLElemStyle('cursor', 'grab', ['BODY'], false);
});
createCSSRule('.en', "display: flex;", false, '');
createCSSRule('.es', "display: none;", false, '');
lang = 'en';
eventHTMLElem('click', 'btn_lang', true, function(event) {
  if (lang == 'es') {
    lang = 'en';
    setCSSRuleStyle('display', 'flex', '.en', true, '');
    setCSSRuleStyle('display', 'none', '.es', true, '');
    setCSSRuleStyle('display', 'flex', '.en', false, '');
    setCSSRuleStyle('display', 'none', '.es', false, '');
  } else if (lang == 'en') {
    lang = 'es';
    setCSSRuleStyle('display', 'flex', '.es', true, '');
    setCSSRuleStyle('display', 'none', '.en', true, '');
    setCSSRuleStyle('display', 'flex', '.es', false, '');
    setCSSRuleStyle('display', 'none', '.en', false, '');
  }
});
sonido = true;
eventHTMLElem('click', 'btn_sonido', true, function(event) {
  if (sonido) {
    setHTMLElemAttribute('src', '/images/audiono.png', 'btn_sonido_img', true);
    sonido = false;
  } else {
    setHTMLElemAttribute('src', '/images/audio.png', 'btn_sonido_img', true);
    sonido = true;
  }
});

eventHTMLElem('click', 'paso1', true, function(event) {
  reiniciar_pasos();
  setHTMLElemStyle('backgroundColor', 'rgba(8, 167, 255, 0.8)', 'paso1', true);
});

registerOnHover('chancado_mesh', false, function() {
  outline('chancado_mesh', 'ENABLE');
}, function() {
  outline('chancado_mesh', 'DISABLE');
});
registerOnClick('chancado_mesh', false, false, [0,1,2], function() {
  desanimacion();
  chancadoBordes = true;
  chancadoAnimation = true;

  operateAnimation('PLAY', getAnimations('chancadoBordes_mesh'), 0, 20, 'AUTO', 1,
          function() {}, false);

      registerSetTimeout(0.5, function() {
    changeVis('crushing_txt', true);
  });
}, function() {});
registerOnHover('molienda_mesh', false, function() {
  outline('molienda_mesh', 'ENABLE');
}, function() {
  outline('molienda_mesh', 'DISABLE');
});
registerOnClick('molienda_mesh', false, false, [0,1,2], function() {
  desanimacion();
  moliendaBordes = true;
  moliendaAnimation = true;

  operateAnimation('PLAY', getAnimations('moliendaBordes_mesh'), 0, 20, 'AUTO', 1,
          function() {}, false);

      registerSetTimeout(0.5, function() {
    changeVis('milling_txt', true);
  });
}, function() {});
registerOnHover('BackFill_mesh', false, function() {
  outline('BackFill_mesh', 'ENABLE');
}, function() {
  outline('BackFill_mesh', 'DISABLE');
});
registerOnClick('BackFill_mesh', false, false, [0,1,2], function() {
  desanimacion();
  backFillBordes = true;
  backFillAnimation = true;

  operateAnimation('PLAY', getAnimations('backFillBordes_mesh'), 0, 20, 'AUTO', 1,
          function() {}, false);

      registerSetTimeout(0.5, function() {
    changeVis('backFill_txt', true);
  });
}, function() {});
registerOnHover('flotacionZN_mesh', false, function() {
  outline('flotacionZN_mesh', 'ENABLE');
}, function() {
  outline('flotacionZN_mesh', 'DISABLE');
});
registerOnClick('flotacionZN_mesh', false, false, [0,1,2], function() {
  desanimacion();
  flotacionZNBordes = true;
  flotacionZNAnimation = true;

  operateAnimation('PLAY', getAnimations('flotacionZNBordes_mesh'), 0, 20, 'AUTO', 1,
          function() {}, false);

      registerSetTimeout(0.5, function() {
    changeVis('znFlotation_txt', true);
  });
}, function() {});
registerOnHover('flotacionPB_mesh', false, function() {
  outline('flotacionPB_mesh', 'ENABLE');
}, function() {
  outline('flotacionPB_mesh', 'DISABLE');
});
registerOnClick(objeto_paso, false, false, [0,1,2], function() {
  desanimacion();
  flotacionPBBordes = true;
  flotacionPBAnimation = true;

  operateAnimation('PLAY', getAnimations('flotacionPBBordes_mesh'), 0, 20, 'AUTO', 1,
          function() {}, false);

      registerSetTimeout(0.5, function() {
    changeVis('pbFlotation_txt', true);
  });
}, function() {});
registerOnHover('deshidratacionPB_mesh', false, function() {
  outline('deshidratacionPB_mesh', 'ENABLE');
}, function() {
  outline('deshidratacionPB_mesh', 'DISABLE');
});
registerOnClick('deshidratacionPB_mesh', false, false, [0,1,2], function() {
  desanimacion();
  deshidratacionPBBordes = true;
  deshidratacionPBAnimation = true;

  operateAnimation('PLAY', getAnimations('deshidratacionPBBordes_mesh'), 0, 20, 'AUTO', 1,
          function() {}, false);

      registerSetTimeout(0.5, function() {
    changeVis('pbDewatering_txt', true);
  });
}, function() {});
registerOnHover('deshidratacionZN_mesh', false, function() {
  outline('deshidratacionZN_mesh', 'ENABLE');
}, function() {
  outline('deshidratacionZN_mesh', 'DISABLE');
});
registerOnClick('deshidratacionZN_mesh', false, false, [0,1,2], function() {
  desanimacion();
  deshidratacionZNBordes = true;
  deshidratacionZNAnimation = true;

  operateAnimation('PLAY', getAnimations('deshidratacionZNBordes_mesh'), 0, 20, 'AUTO', 1,
          function() {}, false);

      registerSetTimeout(0.5, function() {
    changeVis('znDewatering_txt', true);
  });
}, function() {});
registerOnHover('reagents_mesh', false, function() {
  outline('reagents_mesh', 'ENABLE');
}, function() {
  outline('reagents_mesh', 'DISABLE');
});
registerOnClick('reagents_mesh', false, false, [0,1,2], function() {
  desanimacion();
  reagentsBordes = true;
  reagentsAnimation = true;

  operateAnimation('PLAY', getAnimations('reagentsBordes_mesh'), 0, 20, 'AUTO', 1,
          function() {}, false);

      registerSetTimeout(0.5, function() {
    changeVis('reagents_txt', true);
  });
}, function() {});

click_paso('chancado_mesh', 'paso2', '/index.html');
click_paso('molienda_mesh', 'paso3', '/#/molienda');
click_paso('BackFill_mesh', 'paso4', '/index.html');
click_paso('flotacionZN_mesh', 'paso5', '/index.html');
click_paso('flotacionPB_mesh', 'paso6', '/index.html');
click_paso('deshidratacionPB_mesh', 'paso7', '/index.html');
click_paso('deshidratacionZN_mesh', 'paso8', '/index.html');
click_paso('reagents_mesh', 'paso9', '/index.html');

chancadoBordes = false;
moliendaBordes = false;
backFillBordes = false;
flotacionZNBordes = false;
flotacionPBBordes = false;
deshidratacionPBBordes = false;
deshidratacionZNBordes = false;
reagentsBordes = false;

chancadoAnimation = false;
moliendaAnimation = false;
backFillAnimation = false;
flotacionZNAnimation = false;
deshidratacionZNAnimation = false;
reagentsAnimation = false;
flotacionPBAnimation = false;
deshidratacionPBAnimation = false;

chancadoBordes = [false, 'chancadoBordes_mesh', 'crushing_txt'];
moliendaBordes = [false, 'moliendaBordes_mesh', 'milling_txt'];
backFillBordes = [false, 'backFillBordes_mesh', 'backFill_txt'];
flotacionZNBordes = [false, 'flotacionZNBordes_mesh', 'znFlotation_txt'];
flotacionPBBordes = [false, 'flotacionPBBordes_mesh', 'pbFlotation_txt'];
deshidratacionPBBordes = [false, 'deshidratacionPBBordes_mesh', 'pbDewatering_txt'];
deshidratacionZNBordes = [false, 'deshidratacionZNBordes_mesh', 'znDewatering_txt'];
reagentsBordes = [false, 'reagentsBordes_mesh', 'reagents_txt'];
animation_obj = [chancadoBordes, moliendaBordes, backFillBordes, flotacionZNBordes, flotacionPBBordes, deshidratacionPBBordes, deshidratacionZNBordes, reagentsBordes];

texto_obj = ['crushing_txt', 'milling_txt', 'backFill_txt', 'znFlotation_txt', 'pbFlotation_txt', 'pbDewatering_txt', 'znDewatering_txt', 'reagents_txt'];


operateAnimation('PLAY', getAnimations('chancadoBordes_mesh'), 0, 20, 'AUTO', 32,
        function() {}, true);


operateAnimation('PLAY', getAnimations('moliendaBordes_mesh'), 0, 20, 'AUTO', 32,
        function() {}, true);


operateAnimation('PLAY', getAnimations('backFillBordes_mesh'), 0, 20, 'AUTO', 32,
        function() {}, true);


operateAnimation('PLAY', getAnimations('flotacionZNBordes_mesh'), 0, 20, 'AUTO', 32,
        function() {}, true);


operateAnimation('PLAY', getAnimations('deshidratacionZNBordes_mesh'), 0, 20, 'AUTO', 32,
        function() {}, true);


operateAnimation('PLAY', getAnimations('reagentsBordes_mesh'), 0, 20, 'AUTO', 32,
        function() {}, true);


operateAnimation('PLAY', getAnimations('flotacionPBBordes_mesh'), 0, 20, 'AUTO', 32,
        function() {}, true);


operateAnimation('PLAY', getAnimations('deshidratacionPBBordes_mesh'), 0, 20, 'AUTO', 32,
        function() {}, true);

    changeVis(texto_obj, false);

proceso = 'paso1';

Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var THREE = v3d;' + '\n' +
'' + '\n' +
'function onMouseClick(event) {' + '\n' +
'    if (!app || !app.scene || !app.renderer || !app.camera) return;' + '\n' +
'' + '\n' +
'    // Obtener coordenadas del mouse normalizadas' + '\n' +
'    var rect = app.renderer.domElement.getBoundingClientRect();' + '\n' +
'    var mouse = new THREE.Vector2(' + '\n' +
'        ((event.clientX - rect.left) / rect.width) * 2 - 1,' + '\n' +
'        -((event.clientY - rect.top) / rect.height) * 2 + 1' + '\n' +
'    );' + '\n' +
'' + '\n' +
'    var raycaster = new THREE.Raycaster();' + '\n' +
'    raycaster.setFromCamera(mouse, app.camera);' + '\n' +
'' + '\n' +
'    // Obtener todos los objetos Mesh de la escena' + '\n' +
'    var objects = [];' + '\n' +
'    app.scene.traverse(function(child) {' + '\n' +
'        if (child.isMesh) {' + '\n' +
'            objects.push(child);' + '\n' +
'        }' + '\n' +
'    });' + '\n' +
'' + '\n' +
'    var intersects = raycaster.intersectObjects(objects, true);' + '\n' +
'' + '\n' +
'    if (intersects.length > 0) {' + '\n' +
'        var object = intersects[0].object;' + '\n' +
'        var camPos = app.camera.position;' + '\n' +
'        console.log(`Hiciste clic en: ${object.name}`);' + '\n' +
'        console.log(`Posición de la cámara: X=${camPos.x.toFixed(2)}, Y=${camPos.y.toFixed(2)}, Z=${camPos.z.toFixed(2)}`);' + '\n' +
'    }' + '\n' +
'}' + '\n' +
'' + '\n' +
'// Registrar el evento de clic' + '\n' +
'app.renderer.domElement.addEventListener(\'click\', onMouseClick, false);')))(appInstance, v3d, PL, VARS, PROC);


Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('app.controls.addEventListener("change", function () {' + '\n' +
'    var raycaster = new v3d.Raycaster();' + '\n' +
'    var downVector = new v3d.Vector3(0, -1, 0);' + '\n' +
'    var terreno = app.scene.getObjectByName("terreno_meshShape_1_1");' + '\n' +
'' + '\n' +
'    if (!terreno) return;' + '\n' +
'    ' + '\n' +
'' + '\n' +
'    raycaster.set(app.camera.position, downVector);' + '\n' +
'    var intersects = raycaster.intersectObject(terreno, true);' + '\n' +
'' + '\n' +
'    if (intersects.length > 0) {' + '\n' +
'        var groundY = intersects[0].point.y + 20;' + '\n' +
'        if (app.camera.position.y < groundY) {' + '\n' +
'' + '\n' +
'            app.camera.position.y = v3d.MathUtils.lerp(app.camera.position.y, groundY, 0.3);' + '\n' +
'            app.camera.updateMatrixWorld();' + '\n' +
'        }' + '\n' +
'    } else {' + '\n' +
'        var newHeight = app.camera.position.y + 50;' + '\n' +
'        app.camera.position.y = v3d.MathUtils.lerp(app.camera.position.y, newHeight, 0.3);' + '\n' +
'        app.camera.updateMatrixWorld();' + '\n' +
'    }' + '\n' +
'' + '\n' +
'});')))(appInstance, v3d, PL, VARS, PROC);


Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('app.controls.addEventListener(\'change\', function () {' + '\n' +
'    let cam = app.camera;' + '\n' +
'' + '\n' +
'    // Centro del límite' + '\n' +
'    let centerX = 0;' + '\n' +
'    let centerY = 0;' + '\n' +
'    let centerZ = 0;' + '\n' +
'' + '\n' +
'    // Tamaño del área permitida' + '\n' +
'    let rangeX = 600;' + '\n' +
'    let rangeY = 1400;' + '\n' +
'    let rangeZ = 600;' + '\n' +
'' + '\n' +
'    let prevX = cam.position.x;' + '\n' +
'    let prevY = cam.position.y;' + '\n' +
'    let prevZ = cam.position.z;' + '\n' +
'' + '\n' +
'    // Restricciones de movimiento' + '\n' +
'    cam.position.x = Math.min(centerX + rangeX, Math.max(centerX - rangeX, cam.position.x));' + '\n' +
'    cam.position.y = Math.min(centerY + rangeY, Math.max(centerY - rangeY, cam.position.y));' + '\n' +
'    cam.position.z = Math.min(centerZ + rangeZ, Math.max(centerZ - rangeZ, cam.position.z));' + '\n' +
'' + '\n' +
'    if (cam.position.x !== prevX || cam.position.y !== prevY || cam.position.z !== prevZ) {' + '\n' +
'        proceso1();' + '\n' +
'    }' + '\n' +
'});' + '\n' +
'' + '\n' +
'// Define el proceso1' + '\n' +
'function proceso1() {' + '\n' +
'    console.log("La cámara tocó el límite.");' + '\n' +
'    if (v3d && v3d.puzzles && v3d.puzzles.procedures && v3d.puzzles.procedures["home-camera"]) {' + '\n' +
'        v3d.puzzles.procedures["home-camera"]();' + '\n' +
'    } else {' + '\n' +
'        console.warn("La función \'home-camera\' no está definida en v3d.puzzles.procedures.");' + '\n' +
'    }' + '\n' +
'}' + '\n' +
'')))(appInstance, v3d, PL, VARS, PROC);



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.disposeHTMLElements = function() {
    if (_pGlob) {
        _pGlob.htmlElements.forEach(elem => {
            elem.remove();
        });
        _pGlob.htmlElements.clear();
    }
}

PL.disposeMaterialsCache = function() {
    if (_pGlob) {
        for (const mat of _pGlob.materialsCache.values()) {
            mat.dispose();
        }
        _pGlob.materialsCache.clear();
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    PL.disposeHTMLElements();
    PL.disposeMaterialsCache();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
