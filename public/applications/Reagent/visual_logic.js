/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.6.0
 * Wed, 23 Apr 2025 19:32:03 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables used in the init tab
const _initGlob = {
    percentage: 0,
    output: {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        },
    },
};


// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];
_pGlob.htmlElements = new Set();
_pGlob.materialsCache = new Map();

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

const createPzLib = ({ v3d=null, appInstance=null }) => {
    function getElement(id, isParent=false) {
        let elem;
        if (Array.isArray(id) && id[0] === 'CONTAINER') {
            if (appInstance !== null) {
                elem = appInstance.container;
            } else if (typeof _initGlob !== 'undefined') {
                // if we are on the initialization stage, we still can have access
                // to the container element
                const contId = _initGlob.container;
                elem = isParent ? parent.document.getElementById(contId)
                        : document.getElementById(contId);
            }
        } else if (Array.isArray(id) && id[0] === 'WINDOW') {
            elem = isParent ? parent : window;
        } else if (Array.isArray(id) && id[0] === 'DOCUMENT') {
            elem = isParent ? parent.document : document;
        } else if (Array.isArray(id) && id[0] === 'BODY') {
            elem = isParent ? parent.document.body : document.body;
        } else if (Array.isArray(id) && id[0] === 'QUERYSELECTOR') {
            elem = isParent ? parent.document.querySelector(id)
                    : document.querySelector(id);
        } else {
            elem = isParent ? parent.document.getElementById(id)
                    : document.getElementById(id);
        }
        return elem;
    }
        
    function getElements(ids, isParent=false) {
        const elems = [];
        if (Array.isArray(ids) && ids[0] !== 'CONTAINER' && ids[0] !== 'WINDOW'
                && ids[0] !== 'DOCUMENT' && ids[0] !== 'BODY'
                && ids[0] !== 'QUERYSELECTOR') {
            for (let i = 0; i < ids.length; i++) {
                elems.push(getElement(ids[i], isParent));
            }
        } else {
            elems.push(getElement(ids, isParent));
        }
        return elems;
    }
        
    function areListenersSame(target0, type0, listener0, optionsOrUseCapture0,
            target1, type1, listener1, optionsOrUseCapture1) {
        const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
                ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
        const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
                ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
        return target0 === target1 && type0 === type1 && listener0 === listener1
                && capture0 === capture1;
    }
        
    function bindListener(target, type, listener, optionsOrUseCapture) {
        const alreadyExists = _pGlob.eventListeners.some(elem => {
            return areListenersSame(elem.target, elem.type, elem.listener,
                    elem.optionsOrUseCapture, target, type, listener,
                    optionsOrUseCapture);
        });
    
        if (!alreadyExists) {
            target.addEventListener(type, listener, optionsOrUseCapture);
            _pGlob.eventListeners.push({ target, type, listener,
                    optionsOrUseCapture });
        }
    }
        
    function isObjectWorthProcessing(obj) {
        return obj.type !== 'AmbientLight' && obj.name !== '' &&
                !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
                !obj.isAuxClippingMesh;
    }
        
    function getObjectByName(objName) {
        let objFound = null;
    
        const pGlobAvailable = _pGlob !== undefined;
        if (pGlobAvailable && objName in _pGlob.objCache) {
            objFound = _pGlob.objCache[objName] || null;
        }
    
        if (objFound && objFound.name === objName) {
            return objFound;
        }
    
        if (appInstance.scene) {
            appInstance.scene.traverse(obj => {
                if (!objFound && isObjectWorthProcessing(obj) && (obj.name === objName)) {
                    objFound = obj;
                    if (pGlobAvailable) {
                        _pGlob.objCache[objName] = objFound;
                    }
                }
            });
        }
        return objFound;
    }
        
    function getObjectNamesByGroupName(groupName) {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                const objGroupNames = obj.groupNames;
                if (!objGroupNames) {
                    return;
                }
    
                for (let i = 0; i < objGroupNames.length; i++) {
                    const objGroupName = objGroupNames[i];
                    if (objGroupName === groupName) {
                        objNameList.push(obj.name);
                    }
                }
            }
        });
        return objNameList;
    }
        
    function getAllObjectNames() {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                objNameList.push(obj.name);
            }
        });
        return objNameList;
    }
        
    function retrieveObjectNamesAccum(currObjNames, namesAccum) {
        if (typeof currObjNames === 'string') {
            namesAccum.push(currObjNames);
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'GROUP') {
            const newObjNames = getObjectNamesByGroupName(currObjNames[1]);
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'ALL_OBJECTS') {
            const newObjNames = getAllObjectNames();
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames)) {
            for (let i = 0; i < currObjNames.length; i++) {
                retrieveObjectNamesAccum(currObjNames[i], namesAccum);
            }
        }
    }
        
    function retrieveObjectNames(objNames) {
        const accum = [];
        retrieveObjectNamesAccum(objNames, accum);
        return accum.filter(name => name !== '');
    }
        
    function getObjectName(obj) {
        // auto-generated from a multi-material object, use parent name instead
        if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
            return obj.parent.name;
        } else {
            return obj.name;
        }
    }
        
    function initObjectPicking(callback, eventType, mouseDownUseTouchStart=false,
            allowedMouseButtons=null) {
    
        const elem = appInstance.renderer.domElement;
        bindListener(elem, eventType, pickListener);
    
        if (eventType === 'mousedown') {
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, pickListener);
    
        } else if (eventType === 'dblclick') {
    
            let prevTapTime = 0;
    
            function doubleTapCallback(event) {
                const now = new Date().getTime();
                const timesince = now - prevTapTime;
    
                if (timesince < 600 && timesince > 0) {
                    pickListener(event);
                    prevTapTime = 0;
                    return;
                }
    
                prevTapTime = new Date().getTime();
            }
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, doubleTapCallback);
        }
    
        const raycaster = new v3d.Raycaster();
    
        function pickListener(event) {
    
            // to handle unload in loadScene puzzle
            if (!appInstance.getCamera()) {
                return;
            }
    
            event.preventDefault();
    
            let xNorm = 0;
            let yNorm = 0;
            if (event instanceof MouseEvent) {
                if (allowedMouseButtons !== null && allowedMouseButtons.indexOf(event.button) === -1) {
                    return;
                }
                xNorm = event.offsetX / elem.clientWidth;
                yNorm = event.offsetY / elem.clientHeight;
            } else if (event instanceof TouchEvent) {
                const rect = elem.getBoundingClientRect();
                xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
                yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
            }
    
            _pGlob.screenCoords.x = xNorm * 2 - 1;
            _pGlob.screenCoords.y = -yNorm * 2 + 1;
            raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
    
            const objList = [];
            appInstance.scene.traverse(obj => objList.push(obj));
    
            const intersects = raycaster.intersectObjects(objList, false);
            callback(intersects, event);
        }
    }
        
    function isObjectAmongObjects(objNameToCheck, objNames) {
        if (!objNameToCheck) {
            return false;
        }
    
        for (let i = 0; i < objNames.length; i++) {
            if (objNameToCheck === objNames[i]) {
                return true;
            } else {
                // also check children which are auto-generated for multi-material objects
                const obj = getObjectByName(objNames[i]);
                if (obj && obj.type === 'Group') {
                    for (let j = 0; j < obj.children.length; j++) {
                        if (objNameToCheck === obj.children[j].name) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
        
    function transformCoordsSpace(coords, spaceFrom, spaceTo, noSignChange=false) {
    
        if (spaceFrom === spaceTo) {
            return coords;
        }
    
        const y = coords.y;
        const z = coords.z;
    
        if (spaceFrom === 'Z_UP_RIGHT' && spaceTo === 'Y_UP_RIGHT') {
            coords.y = z;
            coords.z = noSignChange ? y : -y;
        } else if (spaceFrom === 'Y_UP_RIGHT' && spaceTo === 'Z_UP_RIGHT') {
            coords.y = noSignChange ? z : -z;
            coords.z = y;
        } else {
            console.error('transformCoordsSpace: Unsupported coordinate space');
        }
    
        return coords;
    }
        
    function getSceneCoordSystem() {
        const scene = appInstance.scene;
        if (scene && 'coordSystem' in scene.userData) {
            return scene.userData.coordSystem;
        }
    
        return 'Y_UP_RIGHT';
    }
        
    const transformEulerV3dToBlenderShortest = function() {
        const eulerTmp = new v3d.Euler();
        const eulerTmp2 = new v3d.Euler();
        const vec3Tmp = new v3d.Vector3();
    
        return function(euler, dest) {
            const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
            const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();
    
            const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
            const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();
    
            dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
            return transformCoordsSpace(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
        }
    }();
        
    function RotationInterface() {
        /**
         * @ignore
         * For user manipulations use XYZ extrinsic rotations (which
         * are the same as ZYX intrinsic rotations)
         *     - Blender/Max/Maya use extrinsic rotations in the UI
         *     - XYZ is the default option, but could be set from
         *       some order hint if exported
         */
        this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
        this._actualRotation = new v3d.Euler();
    }
    
    Object.assign(RotationInterface, {
        initObject: function(obj) {
            if (obj.userData.puzzles === undefined) {
                obj.userData.puzzles = {}
            }
            if (obj.userData.puzzles.rotationInterface === undefined) {
                obj.userData.puzzles.rotationInterface = new RotationInterface();
            }
    
            const rotUI = obj.userData.puzzles.rotationInterface;
            rotUI.updateFromObject(obj);
            return rotUI;
        },
    });
    
    Object.assign(RotationInterface.prototype, {
        updateFromObject: function(obj) {
            const SYNC_ROT_EPS = 1e-8;
    
            if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
                this._actualRotation.copy(obj.rotation);
                this._updateUserRotFromActualRot();
            }
        },
    
        getActualRotation: function(euler) {
            return euler.copy(this._actualRotation);
        },
    
        setUserRotation: function(euler) {
            // don't copy the order, since it's fixed to ZYX for now
            this._userRotation.set(euler.x, euler.y, euler.z);
            this._updateActualRotFromUserRot();
        },
    
        getUserRotation: function(euler) {
            return euler.copy(this._userRotation);
        },
    
        _updateUserRotFromActualRot: function() {
            const order = this._userRotation.order;
            this._userRotation.copy(this._actualRotation).reorder(order);
        },
    
        _updateActualRotFromUserRot: function() {
            const order = this._actualRotation.order;
            this._actualRotation.copy(this._userRotation).reorder(order);
        },
    });
        
    function generateUniqueName(name, isUniqueCb) {
        let uniqueName = name;
    
        if (isUniqueCb !== undefined) {
            while (!isUniqueCb(uniqueName)) {
                const r = uniqueName.match(/^(.*?)(\d+)$/);
                if (!r) {
                    uniqueName += '2';
                } else {
                    uniqueName = r[1] + (Number.parseInt(r[2], 10) + 1);
                }
            }
        }
    
        return uniqueName;
    }
        
    function generateUniqueObjectName(name) {
        return generateUniqueName(name, name => !Boolean(getObjectByName(name)));
    }

    return {
        getElements, getElement, bindListener, getObjectByName,
        retrieveObjectNames, getObjectName, initObjectPicking, isObjectAmongObjects,
        transformCoordsSpace, getSceneCoordSystem, transformEulerV3dToBlenderShortest, RotationInterface,
        generateUniqueObjectName,
    };
};

var PL = {};



// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    const PzLib = createPzLib({ v3d });

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    this.procedures["pantalla_mobil_horinzontal"] = pantalla_mobil_horinzontal;
this.procedures["pantalla_mobil_vertical"] = pantalla_mobil_vertical;
this.procedures["pantalla_mobil"] = pantalla_mobil;
this.procedures["pantalla_web"] = pantalla_web;

    var PROC = {
    "pantalla_mobil_horinzontal": pantalla_mobil_horinzontal,
    "pantalla_mobil_vertical": pantalla_mobil_vertical,
    "pantalla_mobil": pantalla_mobil,
    "pantalla_web": pantalla_web,
};

var VARS = Object.defineProperties({}, {
    
});

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// Describe this function...
function pantalla_mobil_horinzontal() {
  setHTMLElemStyle('display', 'none', 'aviso_celular', true);
}

// Describe this function...
function pantalla_mobil_vertical() {
  setHTMLElemStyle('display', 'flex', 'aviso_celular', true);
}

// getHTMLElemAttribute puzzle
function getHTMLElemAttribute(attr, id, isParent) {
    var elem = PzLib.getElement(id, isParent);
    return elem ? elem[attr]: '';
}

// removeHTMLElement puzzle
function removeHTMLElement(id, isParent) {
    const elem = PzLib.getElement(id, isParent);
    if (elem && elem.parentNode) {
        elem.parentNode.removeChild(elem);
        _pGlob.htmlElements.delete(elem);
    }
}

// Describe this function...
function pantalla_mobil() {
  if (getHTMLElemAttribute('innerWidth', ['WINDOW'], false) < getHTMLElemAttribute('innerHeight', ['WINDOW'], false)) {
    pantalla_mobil_vertical();
  }

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.addEventListener(\'resize\', function() {' + '\n' +
  '    if (window.innerWidth > window.innerHeight) {' + '\n' +
  '        v3d.puzzles.procedures["pantalla_mobil_horinzontal"]();' + '\n' +
  '    } else {' + '\n' +
  '        v3d.puzzles.procedures["pantalla_mobil_vertical"]();' + '\n' +
  '    }' + '\n' +
  '});' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  removeHTMLElement('ayuda', true);
  removeHTMLElement('ayudaContainer', true);
}

// Describe this function...
function pantalla_web() {
  removeHTMLElement('ayudaMovil', true);
  removeHTMLElement('ayudaMovilContainer', true);
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = false;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = true;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'loading_percentage', true);
  setHTMLElemAttribute('style', ['stroke-dashoffset:',472 - 472 * (Math.round(_initGlob.percentage) / 100),';'].join(''), 'circle', true);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('// Detectar si es un dispositivo móvil' + '\n' +
  'if (/Mobi|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {' + '\n' +
  '    v3d.puzzles.procedures["pantalla_mobil"]();' + '\n' +
  '} else {' + '\n' +
  '    v3d.puzzles.procedures["pantalla_web"]();' + '\n' +
  '}' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  setHTMLElemStyle('display', 'flex', 'logo', true);
  setHTMLElemStyle('display', 'flex', 'menu', true);
  setHTMLElemStyle('display', 'flex', 'ayudas', true);
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

const PzLib = createPzLib({ v3d, appInstance });

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["reiniciar_pasos"] = reiniciar_pasos;
this.procedures["pasos"] = pasos;
this.procedures["home-camera"] = home_camera;

var PROC = {
    "reiniciar_pasos": reiniciar_pasos,
    "pasos": pasos,
    "home-camera": home_camera,
};

var VARS = Object.defineProperties({}, {
    'lang': { get: function() { return lang; }, set: function(val) { lang = val; } },
    'sonido': { get: function() { return sonido; }, set: function(val) { sonido = val; } },
    'paso': { get: function() { return paso; }, set: function(val) { paso = val; } },
    'img': { get: function() { return img; }, set: function(val) { img = val; } },
    'camara': { get: function() { return camara; }, set: function(val) { camara = val; } },
    'camara_direccion': { get: function() { return camara_direccion; }, set: function(val) { camara_direccion = val; } },
    'objeto': { get: function() { return objeto; }, set: function(val) { objeto = val; } },
    'i': { get: function() { return i; }, set: function(val) { i = val; } },
    'proceso': { get: function() { return proceso; }, set: function(val) { proceso = val; } },
    'pro1': { get: function() { return pro1; }, set: function(val) { pro1 = val; } },
    'sag_mill_feed_obj': { get: function() { return sag_mill_feed_obj; }, set: function(val) { sag_mill_feed_obj = val; } },
    'sag_mill_feed_conveyor_obj': { get: function() { return sag_mill_feed_conveyor_obj; }, set: function(val) { sag_mill_feed_conveyor_obj = val; } },
    'molinoSAG_obj': { get: function() { return molinoSAG_obj; }, set: function(val) { molinoSAG_obj = val; } },
    'pebble_crusher_obj': { get: function() { return pebble_crusher_obj; }, set: function(val) { pebble_crusher_obj = val; } },
    'saranda_obj': { get: function() { return saranda_obj; }, set: function(val) { saranda_obj = val; } },
    'bombas_obj': { get: function() { return bombas_obj; }, set: function(val) { bombas_obj = val; } },
    'bombas_ciclon_obj': { get: function() { return bombas_ciclon_obj; }, set: function(val) { bombas_ciclon_obj = val; } },
    'debajo_bomba_ciclon_obj': { get: function() { return debajo_bomba_ciclon_obj; }, set: function(val) { debajo_bomba_ciclon_obj = val; } },
    'depositos_obj': { get: function() { return depositos_obj; }, set: function(val) { depositos_obj = val; } },
    'bombas02_obj': { get: function() { return bombas02_obj; }, set: function(val) { bombas02_obj = val; } },
    'faja_obj': { get: function() { return faja_obj; }, set: function(val) { faja_obj = val; } },
    'faja02_obj': { get: function() { return faja02_obj; }, set: function(val) { faja02_obj = val; } },
    'equipo01_obj': { get: function() { return equipo01_obj; }, set: function(val) { equipo01_obj = val; } },
    'faja03_obj': { get: function() { return faja03_obj; }, set: function(val) { faja03_obj = val; } },
    'faja04_obj': { get: function() { return faja04_obj; }, set: function(val) { faja04_obj = val; } },
    'equipo02_obj': { get: function() { return equipo02_obj; }, set: function(val) { equipo02_obj = val; } },
    'depositos02_obj': { get: function() { return depositos02_obj; }, set: function(val) { depositos02_obj = val; } },
    'bombas_03_obj': { get: function() { return bombas_03_obj; }, set: function(val) { bombas_03_obj = val; } },
    'x cam': { get: function() { return x_cam; }, set: function(val) { x_cam = val; } },
    'y cam': { get: function() { return y_cam; }, set: function(val) { y_cam = val; } },
    'x cam b': { get: function() { return x_cam_b; }, set: function(val) { x_cam_b = val; } },
    'z cam': { get: function() { return z_cam; }, set: function(val) { z_cam = val; } },
    'y cam b': { get: function() { return y_cam_b; }, set: function(val) { y_cam_b = val; } },
    'z cam b': { get: function() { return z_cam_b; }, set: function(val) { z_cam_b = val; } },
});

var paso, img, camara, camara_direccion, objeto, sag_mill_feed_obj, sag_mill_feed_conveyor_obj, molinoSAG_obj, pebble_crusher_obj, saranda_obj, bombas_obj, bombas_ciclon_obj, debajo_bomba_ciclon_obj, depositos_obj, bombas02_obj, faja_obj, faja02_obj, equipo01_obj, faja03_obj, faja04_obj, equipo02_obj, proceso, depositos02_obj, bombas_03_obj, i, x_cam, pro1, y_cam, x_cam_b, z_cam, y_cam_b, z_cam_b, lang, sonido;

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        PzLib.bindListener(elem, eventType, callback);
    }
}

// createCSSRule puzzle
function createCSSRule(cssRule, cssRuleCont, isParent, mediaRule) {
    var style = document.createElement('style');
    style.type = 'text/css';
    if (mediaRule) {
        style.innerHTML = `@media ${mediaRule} { ${cssRule} { ${cssRuleCont} } }`;
    } else {
        style.innerHTML = `${cssRule} { ${cssRuleCont} }`;
    }

    var styles = (isParent) ? parent.document.getElementsByTagName('head')[0] :
                              document.getElementsByTagName('head')[0];
    styles.appendChild(style)
}

// setCSSRuleStyle puzzle
function setCSSRuleStyle(prop, value, id, isParent, mediaRule) {
    const styles = (isParent) ? parent.document.styleSheets : document.styleSheets;
    for (let i = 0; i < styles.length; i++) {
        /**
         * workaround for "DOMException: Failed to read the 'cssRules' property
         * from 'CSSStyleSheet': Cannot access rules"
         */
        let cssRules;
        try {
            cssRules = styles[i].cssRules;
        }
        catch (e) { continue; }

        for (let j = 0; j < cssRules.length; j++) {
            const cssRule = cssRules[j];
            if (!mediaRule && cssRule.selectorText == id)
                cssRule.style[prop] = value;
            else if (mediaRule && cssRule.media && cssRule.media.mediaText == mediaRule) {
                const cssRulesMedia = cssRule.cssRules;
                for (let k = 0; k < cssRulesMedia.length; k++) {
                    if (cssRulesMedia[k].selectorText == id)
                        cssRulesMedia[k].style[prop] = value;
                }
            }
        }
    }
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// Describe this function...
function reiniciar_pasos() {
  outline(['ALL_OBJECTS'], 'DISABLE');
  for (let i = 1; i <= 20; i++) {
    setHTMLElemStyle('backgroundColor', 'transparent', 'paso' + String(i), true);
  }
}

// whenHovered puzzle
PzLib.initObjectPicking(function(intersects, event) {

    var prevHovered = _pGlob.hoveredObject;
    var currHovered = '';

    // the event might happen before hover registration
    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    // search for closest hovered object

    var lastIntersectIndex = Infinity;
    _pGlob.objHoverInfo.forEach(function(el) {
        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);

            if (PzLib.isObjectAmongObjects(objName, PzLib.retrieveObjectNames(el.objSelector)) && i <= lastIntersectIndex) {
                currHovered = objName;
                lastIntersectIndex = i;
            }
        }
    });

    if (prevHovered == currHovered) return;

    // first - all "out" callbacks, then - all "over"
    _pGlob.objHoverInfo.forEach(function(el) {
        if (PzLib.isObjectAmongObjects(prevHovered, PzLib.retrieveObjectNames(el.objSelector))) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = prevHovered;
            el.callbacks[1](event);
        }
    });

    _pGlob.objHoverInfo.forEach(function(el) {
        if (PzLib.isObjectAmongObjects(currHovered, PzLib.retrieveObjectNames(el.objSelector))) {
            // ensure the correct value of the hoveredObject block
            _pGlob.hoveredObject = currHovered;
            el.callbacks[0](event);
        }
    });

    _pGlob.hoveredObject = currHovered;
}, 'mousemove');

// whenHovered puzzle
function registerOnHover(objSelector, xRay, cbOver, cbOut) {

    _pGlob.objHoverInfo = _pGlob.objHoverInfo || [];

    _pGlob.objHoverInfo.push({
        objSelector: objSelector,
        callbacks: [cbOver, cbOut],
        xRay: xRay
    });
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    PzLib.initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);
            var objNames = PzLib.retrieveObjectNames(objSelector);

            if (PzLib.isObjectAmongObjects(objName, objNames)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = PzLib.transformCoordsSpace(worldPos,
                PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = PzLib.getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = PzLib.transformCoordsSpace(worldTarget,
                PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = PzLib.getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// Describe this function...
function pasos(paso, img, camara, camara_direccion, objeto) {
  setHTMLElemStyle('display', 'flex', 'information', true);
  proceso = paso;
  setHTMLElemAttribute('src', img, 'ModalInformacion', true);
  reiniciar_pasos();
  setHTMLElemStyle('backgroundColor', 'rgba(8, 167, 255, 0.8)', paso, true);
  tweenCamera(camara, camara_direccion, 1, function() {
    outline(objeto, 'ENABLE');
    registerOnHover(objeto, false, function() {
      if (proceso == paso) {
        setHTMLElemStyle('cursor', 'pointer', ['BODY'], false);
      }
    }, function() {
      if (proceso == paso) {
        setHTMLElemStyle('cursor', 'grab', ['BODY'], false);
      }
    });
    registerOnClick(objeto, false, false, [0,1,2], function() {
      if (proceso == paso) {
        setHTMLElemStyle('display', 'flex', 'contenedorModalInformacion', true);
        registerSetTimeout(0.5, function() {
          setHTMLElemStyle('opacity', '1', 'contenedorModalInformacion', true);
        });
      }
    }, function() {});
  }, 0);
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// setObjTransform puzzle
function setObjTransform(objSelector, isWorldSpace, mode, vector, offset){
    var x = vector[0];
      var y = vector[1];
      var z = vector[2];

    var objNames = PzLib.retrieveObjectNames(objSelector);

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.MathUtils.DEG2RAD);
    }

    var coordSystem = PzLib.getSceneCoordSystem();

    PzLib.transformCoordsSpace(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    PzLib.transformCoordsSpace(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = PzLib.getObjectByName(objName);
        if (!obj) continue;

        if (isWorldSpace && obj.parent) {
            obj.matrixWorld.decomposeE(obj.position, obj.rotation, obj.scale);

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

            obj.matrixWorld.composeE(obj.position, obj.rotation, obj.scale);
            obj.matrix.multiplyMatrices(_pGlob.mat4Tmp.copy(obj.parent.matrixWorld).invert(), obj.matrixWorld);
            obj.matrix.decompose(obj.position, obj.quaternion, obj.scale);

        } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = PzLib.transformEulerV3dToBlenderShortest(obj.rotation,
                    _pGlob.eulerTmp);
            PzLib.transformCoordsSpace(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = PzLib.RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {
            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}

// addAnnotation and removeAnnotation puzzles
function handleAnnot(add, annot, objSelector, contents, id, name) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        // check if it already has an annotation and remove it
        for (var j = 0; j < obj.children.length; j++) {
            var child = obj.children[j];
            if (child.type == "Annotation") {
                // delete all childs of annotation
                child.traverse(function(child2) {
                    if (child2.isAnnotation)
                        child2.dispose();
                    });
                obj.remove(child);
            }
        }
        if (add) {
            var aObj = new v3d.Annotation(appInstance.container, annot, contents);
            aObj.name = PzLib.generateUniqueObjectName(name ? name : annot);
            aObj.fadeObscured = _pGlob.fadeAnnotations;
            if (id) {
                aObj.annotation.id = id;
                aObj.annotationDialog.id = id+'_dialog';
            }
            obj.add(aObj);
        }
    }
}

// addFog puzzle
function addFog(r, g, b, density, near, far) {

    var color = _pGlob.colorTmp.setRGB(r, g, b);

    if (density >= 0)
        appInstance.scene.fog = new v3d.FogExp2(color, density);
    else
        appInstance.scene.fog = new v3d.Fog(color, near, far);
}

// Describe this function...
function home_camera() {
  tweenCamera('', 'Line164823', 1, function() {}, 0);
}


setHTMLElemStyle('cursor', 'grab', ['BODY'], false);
eventHTMLElem('mousedown', ['BODY'], false, function(event) {
  setHTMLElemStyle('cursor', 'grabbing', ['BODY'], false);
});
setHTMLElemStyle('backgroundColor', 'rgba(8, 167, 255, 0.8)', 'paso1', true);
eventHTMLElem('mouseup', ['BODY'], false, function(event) {
  setHTMLElemStyle('cursor', 'grab', ['BODY'], false);
});
createCSSRule('.en', "display: flex;", false, '');
createCSSRule('.es', "display: none;", false, '');
lang = 'en';
eventHTMLElem('click', 'btn_lang', true, function(event) {
  if (lang == 'es') {
    lang = 'en';
    setCSSRuleStyle('display', 'flex', '.en', true, '');
    setCSSRuleStyle('display', 'none', '.es', true, '');
    setCSSRuleStyle('display', 'flex', '.en', false, '');
    setCSSRuleStyle('display', 'none', '.es', false, '');
  } else if (lang == 'en') {
    lang = 'es';
    setCSSRuleStyle('display', 'flex', '.es', true, '');
    setCSSRuleStyle('display', 'none', '.en', true, '');
    setCSSRuleStyle('display', 'flex', '.es', false, '');
    setCSSRuleStyle('display', 'none', '.en', false, '');
  }
});
sonido = true;
eventHTMLElem('click', 'btn_sonido', true, function(event) {
  if (sonido) {
    setHTMLElemAttribute('src', '/images/audiono.png', 'btn_sonido_img', true);
    sonido = false;
  } else {
    setHTMLElemAttribute('src', '/images/audio.png', 'btn_sonido_img', true);
    sonido = true;
  }
});

sag_mill_feed_obj = 'equipo_200_CV_0102';

sag_mill_feed_conveyor_obj = 'equipo_200_CV_0108';

changeVis(['informacionB01_mesh', 'informacionB02_mesh', 'informacionB03_mesh', 'informacionB04_mesh', 'informacionB05_mesh', 'informacionB06_mesh', 'informacionB07_mesh', 'informacionB08_mesh', 'informacionB09_mesh', 'informacionB10_mesh', 'informacionB11_mesh', 'informacionB12_mesh', 'informacionB13_mesh', 'informacionA01_mesh', 'informacionA02_mesh', 'informacionA03_mesh', 'informacionA04_mesh', 'informacionA05_mesh', 'informacionA06_mesh', 'informacionA07_mesh', 'informacionA08_mesh', 'informacionA09_mesh', 'informacionA10_mesh', 'informacionA11_mesh', 'informacionA12_mesh', 'informacionA13_mesh'], false);

molinoSAG_obj = 'equipo_200_ML_0120';

pebble_crusher_obj = 0;

saranda_obj = 'equipo_200_SR_0124';

bombas_obj = ['equipo_200_PP_0142', 'equipo_200_PP_0144'];

bombas_ciclon_obj = 'equipo_200_CL_0150';

debajo_bomba_ciclon_obj = 'equipo_400_SA_0230';

depositos_obj = 'equipo_200_TK_0152';
depositos02_obj = 'equipo_200_TK_0171';

bombas02_obj = 'equipo_200_PP_0158';
bombas_03_obj = 'equipo_200_PP_0156';

faja_obj = 'equipo_200_CV_0125';

faja02_obj = 'equipo_200_CV_0127';

equipo01_obj = 'equipo_200_CR_0130';

faja03_obj = 'equipo_200_CV_0108';

faja04_obj = 'equipo_200_CV_0102';

equipo02_obj = 'equipo_200_PP_0175';

proceso = 'paso1';
  x_cam = (typeof x_cam === 'number' ? x_cam : 0) + -23349.54076984711;
  y_cam = (typeof y_cam === 'number' ? y_cam : 0) + 44773.5700984565;
  z_cam = (typeof z_cam === 'number' ? z_cam : 0) + 61914.60693431429;
  x_cam_b = (typeof x_cam_b === 'number' ? x_cam_b : 0) + -12831.566357143583;
  y_cam_b = (typeof y_cam_b === 'number' ? y_cam_b : 0) + 49069.22817682566;
  z_cam_b = (typeof z_cam_b === 'number' ? z_cam_b : 0) + 38436.00884112109;
eventHTMLElem('click', 'paso1', true, function(event) {
  proceso = 'paso1';
  changeVis(['ALL_OBJECTS'], true);
  reiniciar_pasos();
  outline(['ALL_OBJECTS'], 'DISABLE');
  setHTMLElemStyle('backgroundColor', 'rgba(8, 167, 255, 0.8)', 'paso1', true);
  setObjTransform('camera1', false, 'position', [x_cam, y_cam, z_cam], false);
});
eventHTMLElem('click', 'paso2', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 80}, \'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  changeVis(['ALL_OBJECTS'], true);
  handleAnnot(false, '', ['ALL_OBJECTS'], '', '', undefined);
  setObjTransform('camera1', false, 'position', [-29617.66, 38260.6, 46474.09], false);
  pasos('paso2', '/images/reagent/02-1.png', null, 'SulfatoCu01', ['CianuroFBXASC032CN', 'SulfatoCu01', 'SantatoZN0001', 'SantatoPb15960']);
});
eventHTMLElem('click', 'paso3', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 81}, \'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  changeVis(['ALL_OBJECTS'], true);
  handleAnnot(false, '', ['ALL_OBJECTS'], '', '', undefined);
  setObjTransform('camera1', false, 'position', [-29617.66, 38260.6, 46474.09], false);
  pasos('paso3', '/images/reagent/03-1.png', null, 'motorFtPB16_mesh017', [['motorFtPB16_mesh017', 'extrasv10_mesh557', 'BombaFtPB07_mesh017'], ['extrasv10_mesh551', 'extrasv10_mesh545', 'motorFtPB16_mesh016'], ['motorFtPB16_mesh015', 'extrasv10_mesh533', 'BombaFtPB07_mesh015'], null, null]);
});
eventHTMLElem('click', 'paso4', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 82}, \'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  changeVis(['ALL_OBJECTS'], true);
  handleAnnot(false, '', ['ALL_OBJECTS'], '', '', undefined);
  setObjTransform('camera1', false, 'position', [-31166.44, 40475.13, 48382.16], false);
  pasos('paso4', '/images/reagent/05-1.png', null, 'Line164823', 'Line164823');
});
eventHTMLElem('click', 'paso5', true, function(event) {

  Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('window.parent.postMessage({param1: 1, param2: 83}, \'*\');' + '\n' +
  '')))(appInstance, v3d, PL, VARS, PROC);

  changeVis(['ALL_OBJECTS'], true);
  handleAnnot(false, '', ['ALL_OBJECTS'], '', '', undefined);
  setObjTransform('camera1', false, 'position', [-25256.06, 37961.43, 50285.54], false);
  pasos('paso5', '/images/reagent/06-1.png', null, 'motorFtPB16_mesh001', [['motorFtPB16_mesh001', 'extrasv10_mesh365', 'extrasv10_mesh371'], ['motorFtPB16_mesh002', 'extrasv10_mesh377', 'BombaFtPB07_mesh002'], null]);
});

proceso = 'paso1';
addFog(0.5, 0.5, 0.5, 0.00002, 0, 0);

Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var controls = app.controls;  ' + '\n' +
'if (controls) {' + '\n' +
'    controls.minDistance = 5;  ' + '\n' +
'    controls.maxDistance = 15000;  ' + '\n' +
'}' + '\n' +
'')))(appInstance, v3d, PL, VARS, PROC);


Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('' + '\n' +
'//Rendimiento' + '\n' +
'function hideObjectsOutsideView() {' + '\n' +
'    const camera = app.camera;' + '\n' +
'    const frustum = new v3d.Frustum();' + '\n' +
'    const projScreenMatrix = new v3d.Matrix4();' + '\n' +
'' + '\n' +
'    camera.updateMatrixWorld(); ' + '\n' +
'    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);' + '\n' +
'    frustum.setFromProjectionMatrix(projScreenMatrix);' + '\n' +
'' + '\n' +
'    app.scene.traverse(function(obj) {' + '\n' +
'        if (obj.isMesh && obj.name !== "camera1") {' + '\n' +
'            const visible = frustum.intersectsObject(obj);' + '\n' +
'            obj.visible = visible;' + '\n' +
'        }' + '\n' +
'    });' + '\n' +
'}' + '\n' +
'//app.renderer.setPixelRatio(0.75); // o 0.5 para aún más rendimiento' + '\n' +
'' + '\n' +
'// Llamar en cada frame' + '\n' +
'app.addEventListener("beforeRender", hideObjectsOutsideView);')))(appInstance, v3d, PL, VARS, PROC);


Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('var THREE = v3d;' + '\n' +
'' + '\n' +
'function onMouseClick(event) {' + '\n' +
'    if (!app || !app.scene || !app.renderer || !app.camera) return;' + '\n' +
'' + '\n' +
'    // Obtener coordenadas del mouse normalizadas' + '\n' +
'    var rect = app.renderer.domElement.getBoundingClientRect();' + '\n' +
'    var mouse = new THREE.Vector2(' + '\n' +
'        ((event.clientX - rect.left) / rect.width) * 2 - 1,' + '\n' +
'        -((event.clientY - rect.top) / rect.height) * 2 + 1' + '\n' +
'    );' + '\n' +
'' + '\n' +
'    var raycaster = new THREE.Raycaster();' + '\n' +
'    raycaster.setFromCamera(mouse, app.camera);' + '\n' +
'' + '\n' +
'    // Obtener todos los objetos Mesh de la escena' + '\n' +
'    var objects = [];' + '\n' +
'    app.scene.traverse(function(child) {' + '\n' +
'        if (child.isMesh) {' + '\n' +
'            objects.push(child);' + '\n' +
'        }' + '\n' +
'    });' + '\n' +
'' + '\n' +
'    var intersects = raycaster.intersectObjects(objects, true);' + '\n' +
'' + '\n' +
'    if (intersects.length > 0) {' + '\n' +
'        var object = intersects[0].object;' + '\n' +
'        var camPos = app.camera.position;' + '\n' +
'        console.log(`Hiciste clic en: ${object.name}`);' + '\n' +
'        console.log(`Posición de la cámara: X=${camPos.x.toFixed(2)}, Y=${camPos.y.toFixed(2)}, Z=${camPos.z.toFixed(2)}`);' + '\n' +
'    }' + '\n' +
'}' + '\n' +
'' + '\n' +
'// Registrar el evento de clic' + '\n' +
'app.renderer.domElement.addEventListener(\'click\', onMouseClick, false);')))(appInstance, v3d, PL, VARS, PROC);


Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('app.controls.addEventListener("change", function () {' + '\n' +
'    var raycaster = new v3d.Raycaster();' + '\n' +
'    var downVector = new v3d.Vector3(0, -1, 0);' + '\n' +
'    var terreno = app.scene.getObjectByName("pasted__terreno_mesh");' + '\n' +
'' + '\n' +
'    if (!terreno) return;' + '\n' +
'' + '\n' +
'    raycaster.set(app.camera.position, downVector);' + '\n' +
'    var intersects = raycaster.intersectObject(terreno, true);' + '\n' +
'' + '\n' +
'    if (intersects.length > 0) {40000' + '\n' +
'        var groundY = intersects[0].point.y + 30;' + '\n' +
'        if (app.camera.position.y < groundY) {' + '\n' +
'' + '\n' +
'            app.camera.position.y = v3d.MathUtils.lerp(app.camera.position.y, groundY, 0.3);' + '\n' +
'            app.camera.updateMatrixWorld();' + '\n' +
'        }' + '\n' +
'    } else {' + '\n' +
'        var newHeight = app.camera.position.y + 5000;' + '\n' +
'        app.camera.position.y = v3d.MathUtils.lerp(app.camera.position.y, newHeight, 0.3);' + '\n' +
'        app.camera.updateMatrixWorld();' + '\n' +
'    }' + '\n' +
'' + '\n' +
'});')))(appInstance, v3d, PL, VARS, PROC);


Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('app.controls.addEventListener(\'change\', function () {' + '\n' +
'    let cam = app.camera;' + '\n' +
'' + '\n' +
'    // Centro del límite' + '\n' +
'    let centerX = -23359.657404441412;' + '\n' +
'    let centerY = 42573.993287886326;' + '\n' +
'    let centerZ = 51673.99169030842;' + '\n' +
'' + '\n' +
'    // Tamaño del área permitida' + '\n' +
'    let rangeX = 23000;' + '\n' +
'    let rangeY = 15000;' + '\n' +
'    let rangeZ = 23000;' + '\n' +
'' + '\n' +
'    let prevX = cam.position.x;' + '\n' +
'    let prevY = cam.position.y;' + '\n' +
'    let prevZ = cam.position.z;' + '\n' +
'' + '\n' +
'    // Restricciones de movimiento' + '\n' +
'    cam.position.x = Math.min(centerX + rangeX, Math.max(centerX - rangeX, cam.position.x));' + '\n' +
'    cam.position.y = Math.min(centerY + rangeY, Math.max(centerY - rangeY, cam.position.y));' + '\n' +
'    cam.position.z = Math.min(centerZ + rangeZ, Math.max(centerZ - rangeZ, cam.position.z));' + '\n' +
'' + '\n' +
'    if (cam.position.x !== prevX || cam.position.y !== prevY || cam.position.z !== prevZ) {' + '\n' +
'        proceso1();' + '\n' +
'    }' + '\n' +
'});' + '\n' +
'' + '\n' +
'// Define el proceso1' + '\n' +
'function proceso1() {' + '\n' +
'    console.log("La cámara tocó el límite.");' + '\n' +
'    if (v3d && v3d.puzzles && v3d.puzzles.procedures && v3d.puzzles.procedures["home-camera"]) {' + '\n' +
'        v3d.puzzles.procedures["home-camera"]();' + '\n' +
'    } else {' + '\n' +
'        console.warn("La función \'home-camera\' no está definida en v3d.puzzles.procedures.");' + '\n' +
'    }' + '\n' +
'}' + '\n' +
'')))(appInstance, v3d, PL, VARS, PROC);



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.disposeHTMLElements = function() {
    if (_pGlob) {
        _pGlob.htmlElements.forEach(elem => {
            elem.remove();
        });
        _pGlob.htmlElements.clear();
    }
}

PL.disposeMaterialsCache = function() {
    if (_pGlob) {
        for (const mat of _pGlob.materialsCache.values()) {
            mat.dispose();
        }
        _pGlob.materialsCache.clear();
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    PL.disposeHTMLElements();
    PL.disposeMaterialsCache();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
